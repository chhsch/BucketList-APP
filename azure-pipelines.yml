# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '30'
  buildToolsVersion: '30.0.3'
  androidHome: '$(HOME)/android-sdk'

steps:

# ✅ Install Java 17 and set JAVA_HOME
- script: |
    sudo apt-get update
    sudo apt-get install -y openjdk-17-jdk unzip curl
    export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
    echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
    echo "##vso[task.setvariable variable=PATH]$JAVA_HOME/bin:$PATH"
  displayName: 'Install and set Java 17'

# ✅ Install Android SDK and required tools
- script: |
    mkdir -p $HOME/android-sdk/cmdline-tools
    cd $HOME/android-sdk/cmdline-tools
    curl -sS -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    unzip -q tools.zip
    mv cmdline-tools latest
    export ANDROID_HOME=$HOME/android-sdk
    export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
    yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME \
      "platform-tools" "platforms;android-${{ variables.sdkVersion }}" "build-tools;${{ variables.buildToolsVersion }}"
  displayName: 'Install Android SDK components'

# ✅ Set Android environment variables globally
- script: |
    echo "##vso[task.setvariable variable=ANDROID_HOME]$HOME/android-sdk"
    echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]$HOME/android-sdk"
    echo "##vso[task.setvariable variable=PATH]$HOME/android-sdk/platform-tools:$HOME/android-sdk/cmdline-tools/latest/bin:$PATH"
  displayName: 'Set Android SDK environment variables'

# ✅ Make gradlew executable
- script: chmod +x ./gradlew
  displayName: 'Make gradlew executable'

# ✅ Optional: Cache Gradle dependencies
- task: Cache@2
  inputs:
    key: 'gradle | "$(Agent.OS)" | **/gradle-wrapper.properties'
    path: $(HOME)/.gradle
  displayName: 'Cache Gradle'

# ✅ Build APK
- task: Gradle@3
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    tasks: ':app:assembleDebug'
    options: '--stacktrace --info --warning-mode all'
    publishJUnitResults: false

# ✅ Run Espresso UI Tests (if you have devices/emulators)
# - task: Gradle@3
#   inputs:
#     workingDirectory: ''
#     gradleWrapperFile: 'gradlew'
#     tasks: ':app:connectedDebugAndroidTest'
#     options: '--stacktrace'
#     publishJUnitResults: true
#     testResultsFiles: '**/build/test-results/**/*.xml'

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'testDebugUnitTest'
    options: '--stacktrace'
    publishJUnitResults: true
    testResultsFiles: '**/build/test-results/testDebugUnitTest/*.xml'
  displayName: 'Run Unit Tests'


# ✅ Copy APK to artifacts directory
- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy APKs to artifacts'

# ✅ Publish APK artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'APK'
    publishLocation: 'Container'
  displayName: 'Publish APK Artifact'

# ✅ Upload APK to Firebase App Distribution
- task: DownloadSecureFile@1
  name: downloadFirebaseCreds
  inputs:
    secureFile: 'bucketlistpipeline-firebase-adminsdk-fbsvc-adb8f51068.json'

- script: |
    npm install -g firebase-tools
    firebase login:ci --no-localhost
    firebase appdistribution:distribute $(Build.ArtifactStagingDirectory)/*.apk \
      --app $(FIREBASE_APP_ID) \
      --release-notes "New build from CI/CD Pipeline" \
      --testers "$(TESTER_EMAILS)" \
      --token "$(FIREBASE_TOKEN)"
  displayName: 'Distribute APK via Firebase'

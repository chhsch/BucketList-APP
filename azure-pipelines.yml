# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '30'
  buildToolsVersion: '30.0.3'
  androidHome: '$(HOME)/android-sdk'

steps:
- script: |
    sudo apt-get update
    sudo apt-get install -y openjdk-17-jdk unzip curl
  displayName: 'Install Java 17'

- script: |
    export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-17-openjdk-amd64"
    echo "##vso[task.setvariable variable=PATH]/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH"
  displayName: 'Set JAVA_HOME to Java 17'

- script: |
    mkdir -p $HOME/android-sdk/cmdline-tools
    cd $HOME/android-sdk/cmdline-tools
    curl -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    unzip tools.zip
    mv cmdline-tools latest
    export ANDROID_HOME=$HOME/android-sdk
    export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
    yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME \
      "platform-tools" "platforms;android-30" "build-tools;30.0.3"
  displayName: 'Install Android SDK'

- script: |
    echo "##vso[task.setvariable variable=ANDROID_HOME]$HOME/android-sdk"
    echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]$HOME/android-sdk"
    echo "##vso[task.setvariable variable=PATH]$HOME/android-sdk/platform-tools:$HOME/android-sdk/cmdline-tools/latest/bin:$PATH"
  displayName: 'Set ANDROID_HOME, ANDROID_SDK_ROOT & PATH'


- script: chmod +x ./gradlew
  displayName: 'Make gradlew executable'

# âœ… Create and launch Android emulator
- script: |
    echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-30;google_apis;x86_64"
    echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" --force
    nohup $ANDROID_HOME/emulator/emulator -avd test -no-snapshot -noaudio -no-window -gpu swiftshader_indirect > /dev/null 2>&1 &
    echo "Waiting for emulator to start..."
    $ANDROID_HOME/platform-tools/adb wait-for-device
    $ANDROID_HOME/platform-tools/adb shell input keyevent 82
  displayName: 'Create and start Android Emulator'

  
- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: ':app:assembleDebug'
    options: '--stacktrace --info --warning-mode all'
    publishJUnitResults: false

- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: ':app:connectedDebugAndroidTest'
    options: '--stacktrace'
    publishJUnitResults: true
    testResultsFiles: '**/build/test-results/**/*.xml'

- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'APK'

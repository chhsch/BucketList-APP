# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '30'
  buildToolsVersion: '30.0.3'
  androidHome: '$(HOME)/android-sdk'

steps:
# ✅ Install Java 17 manually (revised from Java 11)
- script: |
    sudo apt-get update
    sudo apt-get install -y openjdk-17-jdk unzip curl
  displayName: 'Install Java 17 and tools'

# ✅ Install Android SDK command-line tools
- script: |
    mkdir -p $HOME/android-sdk/cmdline-tools
    cd $HOME/android-sdk/cmdline-tools
    curl -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    unzip tools.zip
    mv cmdline-tools latest
    export ANDROID_HOME=$HOME/android-sdk
    export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
    yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME \
      "platform-tools" "platforms;android-30" "build-tools;30.0.3"
  displayName: 'Install Android SDK components'

# ✅ Set Android SDK env vars globally
- script: |
    echo "##vso[task.setvariable variable=ANDROID_HOME]$HOME/android-sdk"
    echo "##vso[task.setvariable variable=PATH]$HOME/android-sdk/platform-tools:$HOME/android-sdk/cmdline-tools/latest/bin:$PATH"
  displayName: 'Set ANDROID_HOME and PATH'

# ✅ Make gradlew executable
- script: chmod +x ./gradlew
  displayName: 'Make gradlew executable'

# # ✅ Build APK
# - task: Gradle@2
#   inputs:
#     gradleWrapperFile: './gradlew'
#     tasks: 'assembleDebug'
#     options: '--stacktrace --info --warning-mode all'
    
- task: Gradle@3
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assembleDebug'

# ✅ Run Espresso UI Tests
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'connectedDebugAndroidTest'
    options: '--stacktrace'
    publishJUnitResults: true
    testResultsFiles: '**/build/test-results/**/*.xml'

# ✅ Copy APK to artifacts directory
- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

# ✅ Publish APK as artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'APK'
